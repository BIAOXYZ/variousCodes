class Solution(object):
    def findCircleNum(self, isConnected):
        """
        :type isConnected: List[List[int]]
        :rtype: int
        """

        def find(x):
            if x == fa[x]:
                return x
            else:
                return find(fa[x])

        def union_big_as_father(x, y):
            fa[x] = find(x)
            fa[y] = find(y)
            if fa[x] == fa[y]:
                return
            else:
                if fa[x] > fa[y]:
                    fa[y] = fa[x]
                else:
                    fa[x] = fa[y]
        
        n = len(isConnected)
        fa = {i:i for i in range(n)}
        for i in range(n):
            for j in range(i+1, n):
                if isConnected[i][j] == 1:
                    union_big_as_father(i, j)
        
        """
        # 如果没有这样第二次再来一遍的话，对于输入 [[1,0,0,1],[0,1,1,0],[0,1,1,1],[1,0,1,1]] 就会输出错误答案2，
        # 实际上正确答案应该是1。因为这个矩阵第一次循环，fa的变化情况如下：
        # {1:1, 2:2, 3:3, 4:4} --> {1:1, 2:2, 3:3, 4:1} --> {1:1, 2:2, 3:2, 4:1} --> {1:1, 2:2, 3:1, 4:1} --> 不变
        # 但是其实2的father也应该是1，只是2只能通过3更新，但是3的father从2变成1后，后面没法再改2的father了。
        # 因此，把整个循环在一模一样重新搞一遍应该就可以了。
        for i in range(n):
            for j in range(i+1, n):
                if isConnected[i][j] == 1:
                    union(i, j)
        
        return len(set(fa.values()))
        """

        # 不要上面那部分了，而且在做并查集合并的时候，改为大的值做father。那么同样对于输入 [[1,0,0,1],[0,1,1,0],[0,1,1,1],[1,0,1,1]]
        # 经过第一次二阶循环的union后，整个的变化过程是这样的：
        # {1:1, 2:2, 3:3, 4:4} --> {1:4, 2:2, 3:3, 4:4} --> {1:4, 2:3, 3:3, 4:4} --> {1:4, 2:3, 3:4, 4:4} --> 不变
        # 此时返回所有key和value相等的键值对的数目即为正确答案。那么关键的问题来了，为什么这样是对的？原因是因为：如果用小值做father，
        # 会出现“后面的新更改无法影响到前面的现象”，比如：在更上面那组变化序列中，1开始没法影响到2，但是实际上呢？
        # 1通过影响4，然后4影响3，3影响2，最终还是需要影响2的，但是小值做father无法做到这点。
        
        ##### 真是日了狗了，上面洋洋洒洒又写了一堆，那个长输入还是不对，艹他妈了就。。。看来union的时候必须改father，草草草。
        res = 0
        for i in range(n):
            if fa[i] == i:
                res += 1
        return res
        
"""
https://leetcode-cn.com/submissions/detail/137200910/

59 / 113 个通过测试用例
状态：解答错误

输入：
[[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]]
输出：
10
预期：
8
"""
